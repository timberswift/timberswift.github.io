<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你好</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-04T15:41:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>timberswift</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UWP学习(三)--My Naïve Mondrian Player</title>
    <link href="http://yoursite.com/2018/04/01/uwp3-1/"/>
    <id>http://yoursite.com/2018/04/01/uwp3-1/</id>
    <published>2018-04-01T12:41:19.000Z</published>
    <updated>2018-04-04T15:41:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GitHub项目链接"><a href="#GitHub项目链接" class="headerlink" title="GitHub项目链接"></a><a href="https://github.com/timberswift/NaiveMondrianPlayer" target="_blank" rel="noopener">GitHub项目链接</a></h3><h2 id="项目成果"><a href="#项目成果" class="headerlink" title="项目成果"></a>项目成果</h2><ul><li><p>播放器主界面</p><p><figure class="figure"><img src="/2018/04/01/uwp3-1/main.png" alt=""></figure></p></li><li><p>选择音频文件并播放</p><p><figure class="figure"><img src="/2018/04/01/uwp3-1/mp3c.png" alt=""></figure></p><p><figure class="figure"><img src="/2018/04/01/uwp3-1/mp3.png" alt=""></figure></p><p>​</p></li><li><p>选择视频文件并播放</p><p><figure class="figure"><img src="/2018/04/01/uwp3-1/mp4c.png" alt=""></figure></p><p><figure class="figure"><img src="/2018/04/01/uwp3-1/mp42.png" alt=""></figure></p></li></ul><h2 id="技术问题"><a href="#技术问题" class="headerlink" title="技术问题"></a>技术问题</h2><h3 id="1-界面设计"><a href="#1-界面设计" class="headerlink" title="1.界面设计"></a>1.界面设计</h3><p>​    可视化程序设计，重点还是在可视化上~ 即使是这样一个简单的程序，它也应该拥有开发者对其界面设计的一个端正态度的权利。因此我遇到的第一个问题就是，界面设计。<br>    界面设计是建立在掌握了软件功能的前提之上。因为只有清楚了软件功能需求，才会知道界面的模块格局与主体控件。根据软件需求，主体控件自然是MediaPlayerElement。然后还需要有文件选择入口。我选择了使用最简单的Button实现。另外，我觉得还需要有显示文件名的一栏。在掌握着功能需要后，开始构思界面排版与风格。了解到几个模块特性，我想到的总体风格，没错，就是老师之前讲到过的蒙德里安经典风格的格子画。</p><ul><li>先说效果问题：要想掌握蒙德里安的精髓可是相当难啊~你得考虑线条的粗细、格子的交错和大小、格子的颜色搭配填充和颜色饱和度选取以使得界面协调等很多因素。</li><li>再说技术问题: 实现格子风格设计的xaml技术不算复杂。主体控件是Grid，实现线条其实有两个思路。一是在每个网格里填充满线条的颜色，然后填进去的色块只需要Margin线条宽度值就好(其实这个思路是我实现了第二种思路后才想到的–)。二是直接做线条宽度的格子，在里面填充黑色背景。然后色块的交错排版选择StackPanel是很好的选择。另外，我还使用了相当部分的border控件，直接填充颜色，形成蒙德里安风格色块。就这样简单~</li></ul><p>但是在效果和技术完美结合上，耗费了我大部分时间。。整个过程是没有参考文档的，如果<a href="https://www.zhihu.com/question/24127981" target="_blank" rel="noopener">如何理解蒙德里安格子画精髓</a>也算?</p><p>我的xaml代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Page</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x:Class</span>=<span class="string">"MediaPlayer.MainPage"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:local</span>=<span class="string">"using:MediaPlayer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:d</span>=<span class="string">"http://schemas.microsoft.com/expression/blend/2008"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mc</span>=<span class="string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">mc:Ignorable</span>=<span class="string">"d"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">".1*"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"auto"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RowDefinition</span> <span class="attr">Height</span>=<span class="string">"auto"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.RowDefinitions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">".13*"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">"auto"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ColumnDefinition</span> <span class="attr">Width</span>=<span class="string">".9*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">"0"</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span>  <span class="attr">Width</span>=<span class="string">"auto"</span> <span class="attr">Height</span>=<span class="string">"auto"</span> <span class="attr">Background</span>=<span class="string">"Red"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span> <span class="attr">Width</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">Grid.Row</span>=<span class="string">"2"</span> <span class="attr">Width</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">"1"</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span> <span class="attr">Height</span>=<span class="string">"5"</span> <span class="attr">Width</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">"0"</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span> <span class="attr">Height</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">"2"</span> <span class="attr">Grid.Row</span>=<span class="string">"1"</span> <span class="attr">Height</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Grid.Column</span>=<span class="string">"0"</span> <span class="attr">Grid.Row</span>=<span class="string">"2"</span> <span class="attr">Height</span>=<span class="string">"auto"</span> <span class="attr">Orientation</span>=<span class="string">"Vertical"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Background</span>=<span class="string">"#2586BB"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Name</span>=<span class="string">"chose"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span>   <span class="attr">Foreground</span>=<span class="string">"White"</span> <span class="attr">FontSize</span>=<span class="string">"14px"</span> <span class="attr">Margin</span>=<span class="string">"2,10,2,10"</span> <span class="attr">Padding</span>=<span class="string">"2,0,2,0"</span> <span class="attr">FontFamily</span>=<span class="string">"Microsoft YaHei"</span> <span class="attr">FontWeight</span>=<span class="string">"Normal"</span>&gt;</span>选择文件类型<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"3"</span>  <span class="attr">Background</span>=<span class="string">"#2586BB"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Background</span>=<span class="string">"White"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Name</span>=<span class="string">"choose_mp3"</span>  <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Content</span>=<span class="string">"MP3"</span>  <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"40"</span> <span class="attr">Background</span>=<span class="string">"White"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Click</span>=<span class="string">"choose_mp3_Click"</span> <span class="attr">FontFamily</span>=<span class="string">"Adobe Gothic Std B"</span> <span class="attr">FontWeight</span>=<span class="string">"Bold"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"3"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Background</span>=<span class="string">"White"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Name</span>=<span class="string">"choose_mp4"</span>  <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Content</span>=<span class="string">"MP4"</span>  <span class="attr">Width</span>=<span class="string">"150"</span> <span class="attr">Height</span>=<span class="string">"40"</span> <span class="attr">Background</span>=<span class="string">"White"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">Click</span>=<span class="string">"choose_mp4_Click"</span> <span class="attr">FontFamily</span>=<span class="string">"Adobe Gothic Std B"</span> <span class="attr">FontWeight</span>=<span class="string">"Bold"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"100"</span>  <span class="attr">Background</span>=<span class="string">"#2586BB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Width</span>=<span class="string">"auto"</span> <span class="attr">Height</span>=<span class="string">"200"</span> <span class="attr">Grid.Column</span>=<span class="string">"0"</span> <span class="attr">Orientation</span>=<span class="string">"Horizontal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Orientation</span>=<span class="string">"Vertical"</span> <span class="attr">Height</span>=<span class="string">"200"</span> <span class="attr">Width</span>=<span class="string">"73"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"120"</span>  <span class="attr">Background</span>=<span class="string">"Yellow"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"35"</span>  <span class="attr">Background</span>=<span class="string">"White"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"5"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"35"</span>  <span class="attr">Background</span>=<span class="string">"White"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Width</span>=<span class="string">"4"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Width</span>=<span class="string">"500"</span>  <span class="attr">Background</span>=<span class="string">"Black"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span>  <span class="attr">Height</span>=<span class="string">"4"</span>  <span class="attr">Background</span>=<span class="string">"#353535"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Height</span>=<span class="string">"500"</span> <span class="attr">Background</span>=<span class="string">"Red"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Column</span>=<span class="string">"2"</span> <span class="attr">Grid.Row</span>=<span class="string">"0"</span>  <span class="attr">Background</span>=<span class="string">"Yellow"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Name</span>=<span class="string">"media_title"</span>   <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span>  <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">Text</span>=<span class="string">"Welcome"</span> <span class="attr">FontSize</span>=<span class="string">"20px"</span> <span class="attr">FontFamily</span>=<span class="string">"Arial Black"</span> <span class="attr">FontWeight</span>=<span class="string">"Bold"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Border</span> <span class="attr">Grid.Row</span>=<span class="string">"2"</span> <span class="attr">Grid.Column</span>=<span class="string">"2"</span> <span class="attr">Background</span>=<span class="string">"#FFF8FF"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MediaPlayerElement</span> <span class="attr">Name</span>=<span class="string">"my_player"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">AreTransportControlsEnabled</span>=<span class="string">"True"</span> <span class="attr">FontFamily</span>=<span class="string">"Adobe Arabic"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">MediaPlayerElement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Grid.Column</span>=<span class="string">"2"</span> <span class="attr">Grid.Row</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Image</span> <span class="attr">Name</span>=<span class="string">"mp3_logo"</span> <span class="attr">Width</span>=<span class="string">"300"</span> <span class="attr">Height</span>=<span class="string">"300"</span> <span class="attr">Source</span>=<span class="string">"Assets/mp32.jpg"</span> <span class="attr">Margin</span>=<span class="string">"0,0,0,100"</span> <span class="attr">Opacity</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Image</span> <span class="attr">Name</span>=<span class="string">"welcome"</span> <span class="attr">Width</span>=<span class="string">"300"</span> <span class="attr">Height</span>=<span class="string">"50"</span> <span class="attr">Source</span>=<span class="string">"Assets/logo2.png"</span> <span class="attr">Margin</span>=<span class="string">"0,40,0,0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Image</span> <span class="attr">Name</span>=<span class="string">"logo"</span> <span class="attr">Width</span>=<span class="string">"200"</span> <span class="attr">Height</span>=<span class="string">"150"</span> <span class="attr">Source</span>=<span class="string">"Assets/grid.jpg"</span> <span class="attr">Margin</span>=<span class="string">"0,0,0,200"</span> <span class="attr">Opacity</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-文件选择"><a href="#2-文件选择" class="headerlink" title="2.文件选择"></a>2.文件选择</h3><p>文件选择这块是这个软件的核心板块。在实现播放器之前，我想先尝试着推测梳理一下整个软件实现的思路流程。</p><ul><li>首先要有一个文件选择器。用户可以根据系统自带的文件选取可视化界面选取相应文件。</li><li>然后要对文件选取的格式进行约束。在此软件中就是音频和视频文件。选择成功后，文件选择器要返回一个文件对象或者文件路径。</li><li>播放器相关接口接收到这个文件对象或者文件路径后，实现播放的功能。</li></ul><p>应着自己初步的思路，我先查找了C#实现文件选择器的相关文档。<br><a href="https://blog.csdn.net/u011033906/article/details/65448394" target="_blank" rel="noopener">参考文档链接</a><br>文档的参考代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//1.创建和自定义 FileOpenPicker</span><br><span class="line">var picker = new Pickers.FileOpenPicker();</span><br><span class="line">picker.ViewMode = Pickers.PickerViewMode.Thumbnail;</span><br><span class="line">picker.SuggestedStartLocation = Pickers.PickerLocationId.PicturesLibrary;</span><br><span class="line"></span><br><span class="line">picker.FileTypeFilter.Add(&quot;.jpg&quot;);</span><br><span class="line">picker.FileTypeFilter.Add(&quot;.jpeg&quot;);</span><br><span class="line">picker.FileTypeFilter.Add(&quot;.png&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Windows.Storage.StorageFile file = await picker.PickSingleFileAsync();</span><br><span class="line">if (file != null)</span><br><span class="line">&#123;</span><br><span class="line">    // Application now has read/write access to the picked file</span><br><span class="line">    this.textBlock.Text = &quot;Picked photo: &quot; + file.Name;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    this.textBlock.Text = &quot;Operation cancelled.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据参考代码，看来跟自己之前的思路基本吻合。首先是通过FileOpenPicker声明一个对象，这个对象通过对文件格式的筛选，在用户选择完成后，生成某个类型(C#的var特性也是超级好用~)的file对象。我想有了这个file，只需要修改if(file != null){}内的内容，接下来交给mediaplayer处理，应该就实现了。<br>接下来，解决mediaplayerelement实现播放的问题。<br>首先参考的是xaml controls gallery。里面对控件的前端实现很简单，要实现后端媒体播放功能，还得查询<a href="https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.mediaelement" target="_blank" rel="noopener">微软官方文档</a>。<br>参考代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private async void Button_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    await SetLocalMedia();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async private System.Threading.Tasks.Task SetLocalMedia()</span><br><span class="line">&#123;</span><br><span class="line">    var openPicker = new Windows.Storage.Pickers.FileOpenPicker();</span><br><span class="line"></span><br><span class="line">    openPicker.FileTypeFilter.Add(&quot;.wmv&quot;);</span><br><span class="line">    openPicker.FileTypeFilter.Add(&quot;.mp4&quot;);</span><br><span class="line">    openPicker.FileTypeFilter.Add(&quot;.wma&quot;);</span><br><span class="line">    openPicker.FileTypeFilter.Add(&quot;.mp3&quot;);</span><br><span class="line"></span><br><span class="line">    var file = await openPicker.PickSingleFileAsync();</span><br><span class="line"></span><br><span class="line">    // mediaPlayer is a MediaElement defined in XAML</span><br><span class="line">    if (file != null)</span><br><span class="line">    &#123;</span><br><span class="line">        var stream = await file.OpenAsync(Windows.Storage.FileAccessMode.Read);</span><br><span class="line">        mediaPlayer.SetSource(stream, file.ContentType);</span><br><span class="line"></span><br><span class="line">        mediaPlayer.Play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>​    这份参考代码与之前的参考代码惊人的相似。我便知道我离成功仅半步之遥了。不过微软这段官方的参考代码却有很多值得学习的地方，这个async await异步线程特性的使用。在UI线程里不处理复杂任务，async await特性完美解决了不需要new thread()便实现了这个任务。<br>    根据两个参考代码，我的代码自然也就水到渠成了，只需要对自己的特性进行微小的调整。在map3选择button和mp4选择button下均处理异步线程的文件选取事件。但是为了区分格式，我设置了标志变量flag，在MP3按钮下设置为0，MP4按钮下设置为1，再当成形参传入异步线程任务里让其区分。另外，加入了界面切换模块。</p><p>我的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public MainPage()</span><br><span class="line">       &#123;</span><br><span class="line">           this.InitializeComponent();</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       int flag = -1;  // to mark the mp3 or mp4 button choose</span><br><span class="line">//音频文件选择处理事件</span><br><span class="line">       private async void choose_mp3_Click(object sender, RoutedEventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line">           //若点击MP3文件选择按钮，flag标志设为0</span><br><span class="line">           flag = 0;     </span><br><span class="line">           await SetLocalMedia(flag);</span><br><span class="line">           //切换界面</span><br><span class="line">           mp3_logo.Opacity = 1;</span><br><span class="line">           logo.Opacity = 0;</span><br><span class="line">           welcome.Opacity = 0;</span><br><span class="line">       &#125;</span><br><span class="line">//视频文件选择处理事件</span><br><span class="line">       private async void choose_mp4_Click(object sender, RoutedEventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line">           //若点击MP4文件选择按钮，flag标志设为1</span><br><span class="line">           flag = 1;</span><br><span class="line">           await SetLocalMedia(flag);</span><br><span class="line">           //切换界面</span><br><span class="line">           logo.Opacity = 0;</span><br><span class="line">           welcome.Opacity = 0;</span><br><span class="line">           mp3_logo.Opacity = 0;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       async private System.Threading.Tasks.Task SetLocalMedia(int flag)</span><br><span class="line">       &#123;</span><br><span class="line">           FileOpenPicker openPicker = new FileOpenPicker();</span><br><span class="line">           if(flag == 0)</span><br><span class="line">           &#123;</span><br><span class="line">               openPicker.FileTypeFilter.Add(&quot;.mp3&quot;);</span><br><span class="line">               openPicker.FileTypeFilter.Add(&quot;.wma&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           else if(flag == 1)</span><br><span class="line">           &#123;   </span><br><span class="line">               openPicker.FileTypeFilter.Add(&quot;.mp4&quot;);</span><br><span class="line">               openPicker.FileTypeFilter.Add(&quot;.wmv&quot;);</span><br><span class="line">           &#125;  </span><br><span class="line"></span><br><span class="line">           var file = await openPicker.PickSingleFileAsync();</span><br><span class="line"></span><br><span class="line">           if (file != null)</span><br><span class="line">           &#123;</span><br><span class="line">               //播放器标题栏设为文件名，文件名可通过file的属性值直接获取</span><br><span class="line">               media_title.Text = file.Name;        </span><br><span class="line">               my_player.Source = MediaSource.CreateFromStorageFile(file);</span><br><span class="line">               my_player.MediaPlayer.Play();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-界面切换和媒体名显示"><a href="#3-界面切换和媒体名显示" class="headerlink" title="3.界面切换和媒体名显示"></a>3.界面切换和媒体名显示</h3><p>​    在播放器基本功能实现完成之后，还有一点小问题需要解决。就是播放音频文件时的标识。我想到了用一个Image控件显示音频图标，以明显展示正在播放的文件类型。但是在用户没有选择文件播放之前这个标示图是不能显示在主界面了，这涉及到对控件的隐藏。于是我查询了有关<a href="https://blog.csdn.net/nomasp/article/details/50263383" target="_blank" rel="noopener">隐藏控件相关的文档</a>。可惜的是C#关于visible和opacity的对比相关资料很少，css倒是一大把。我猜他们大概的区别都差不多吧。查阅文档后知道了visible与opacity(透明度)都能实现对控件的隐藏。区别是visible为false后相关的点击事件也取消了，而opacity调为0后虽然控件不可见但是你还是可以点击它触发事件。我采用的opacity实现。</p><p>代码就是修改控件的opacity而已：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    mp3_logo.Opacity = 1; //切换到MP3文件，MP3 logo显示</span><br><span class="line">logo.Opacity = 0;//播放器logo隐藏</span><br><span class="line">welcome.Opacity = 0;//欢迎页隐藏</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>媒体名的显示也很简单。还记得刚才file对象，它里面应该有自己的name属性。直接调用显示在textblock就行了。代码很简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">media_title.Text = file.Name;</span><br></pre></td></tr></table></figure></p><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​    整个流程实现下来其实还是挺顺畅的(别做梦了，只是你实现的功能too young too naive而已..),我觉得一个好的界面是一个应用有趣的灵魂之一，所以我觉得花一定精力去设计你的软件界面是很有必要的一件事。在初步实现了我的界面<br>还有，在实现一些功能之前，自己不妨可以先推测并梳理一下究竟大概是以怎样的步骤去实现，必要条件是哪些(即使你暂时不知道具体的代码实现)、模块的结合是怎样的。然后在自己的问题中分条查询文档，当发现这些参考文档的异同中，你也许就有了自己的思路和解决方案。具体干货：善用var、善用async await、善用搜索引擎。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;GitHub项目链接&quot;&gt;&lt;a href=&quot;#GitHub项目链接&quot; class=&quot;headerlink&quot; title=&quot;GitHub项目链接&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/timberswift/NaiveMondrianPla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UWP_Teamwork(一)--A Senoir Interview</title>
    <link href="http://yoursite.com/2018/03/28/uwp3/"/>
    <id>http://yoursite.com/2018/03/28/uwp3/</id>
    <published>2018-03-28T15:47:24.000Z</published>
    <updated>2018-03-29T02:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q1：最后的项目，你们花了多长时间去计划呢？"><a href="#Q1：最后的项目，你们花了多长时间去计划呢？" class="headerlink" title="Q1：最后的项目，你们花了多长时间去计划呢？"></a>Q1：最后的项目，你们花了多长时间去计划呢？</h3><ul><li>第一节课的时候老师就说过最后要做一个大项目出来，所以从刚开课那时就开始构思和计划。从规划到开始实践，也就是一周之内。</li></ul><p>（不得不说学长规划超级强，尽早把自己要做的任务规划好，肯定不会吃亏）</p><h3 id="Q2：你们最终的项目完成花了多长时间？"><a href="#Q2：你们最终的项目完成花了多长时间？" class="headerlink" title="Q2：你们最终的项目完成花了多长时间？"></a>Q2：你们最终的项目完成花了多长时间？</h3><ul><li>我学习方法是紧跟着老师上课的进度，所以在老师讲到一些有用的控件和功能时，我就源源不断的将这些新控件加入到我最终项目中。</li><li>所以可以说是从刚开课就开始对final project的coding，一直做到快结课的时候。7周时间吧</li></ul><p>（纳尼，还有这种操作？如果从一开始我也能拥有学长这样长远的眼光就好了–）</p><h3 id="Q3：你们的项目共计大概有多少行代码呢？"><a href="#Q3：你们的项目共计大概有多少行代码呢？" class="headerlink" title="Q3：你们的项目共计大概有多少行代码呢？"></a>Q3：你们的项目共计大概有多少行代码呢？</h3><ul><li>这还真没有数过啊…不算界面部分，后端代码一共不超过1000行吧~</li><li>不过在前端界面部分我花了很多心思，功能再牛也不如界面做得好看~哈哈。界面跟后端加起来一共1000行代码吧。算是一个很小型项目了</li></ul><p>（比起友组的5w行级别代码量，学长可以说是非常清真了。不过我们量少质优，这才是学长的修真理念！）</p><h3 id="Q4：你们的组员都对这个项目施展了自己的贡献吗？有几个组员是真正全力去为这个项目做贡献呢？"><a href="#Q4：你们的组员都对这个项目施展了自己的贡献吗？有几个组员是真正全力去为这个项目做贡献呢？" class="headerlink" title="Q4：你们的组员都对这个项目施展了自己的贡献吗？有几个组员是真正全力去为这个项目做贡献呢？"></a>Q4：你们的组员都对这个项目施展了自己的贡献吗？有几个组员是真正全力去为这个项目做贡献呢？</h3><ul><li>emmm….这个问题就比较尴尬了–</li><li>实际啊对项目有贡献的只有我一个人–  我有给组员分配任务，也有整合组员的代码到项目，但那些实现的功能都微不足道辣。</li><li>所以最后，真正对项目有实际贡献的差不多只有我一个人–</li></ul><p>（联发科处理器，是会被淘汰的。不过我觉得学长会把自己架构慢慢升级到高通甚至苹果，看好学长。）</p><h3 id="Q5：在完成项目过程中，你们队伍遇到了什么样的难题？-比如不平衡的编程能力、时间限制、经验的缺乏、具体的项目问题等方面"><a href="#Q5：在完成项目过程中，你们队伍遇到了什么样的难题？-比如不平衡的编程能力、时间限制、经验的缺乏、具体的项目问题等方面" class="headerlink" title="Q5：在完成项目过程中，你们队伍遇到了什么样的难题？(比如不平衡的编程能力、时间限制、经验的缺乏、具体的项目问题等方面)"></a>Q5：在完成项目过程中，你们队伍遇到了什么样的难题？(比如不平衡的编程能力、时间限制、经验的缺乏、具体的项目问题等方面)</h3><ul><li><p>不平衡的编程问题肯定有，因为随机组队刚好分到两个同学能力不是特别强。</p></li><li><p>时间就还好，因为一开始就规划好了项目，并且在这过程中一直在不断实现，所以时间上绰绰有余。</p></li><li><p>之前自己有写过安卓，安卓(Java)跟C#很像，所以没有经验上的缺乏。</p></li><li><p>难题：项目中用到知识远远超过老师讲授的内容，所以很多东西需要自学。网上关于uwp相关文档讨论非常少，微软官方文档写得很不清晰啊(中文文档不清晰，英文依旧是写得不清晰–)</p><p>所以不断看文档，不断揣测文档的意思，在这方面花的功夫是比较多了。然后同时还得把文档不断的实践，这部分是去年项目最大的挑战吧！</p></li></ul><p>（官方精神，令人佩服。）</p><p>That‘s All~</p><hr><p>写了一次超级轻松的作业，开心。</p><p>附上全保密性的证据：</p><p><figure class="figure"><img src="/2018/03/28/uwp3/xz.jpg" alt=""></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Q1：最后的项目，你们花了多长时间去计划呢？&quot;&gt;&lt;a href=&quot;#Q1：最后的项目，你们花了多长时间去计划呢？&quot; class=&quot;headerlink&quot; title=&quot;Q1：最后的项目，你们花了多长时间去计划呢？&quot;&gt;&lt;/a&gt;Q1：最后的项目，你们花了多长时间去计划
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UWP学习(二)--5 Features and Implementations in YouTube</title>
    <link href="http://yoursite.com/2018/03/24/uwp1/"/>
    <id>http://yoursite.com/2018/03/24/uwp1/</id>
    <published>2018-03-24T11:03:23.000Z</published>
    <updated>2018-03-24T13:45:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><figure class="figure"><img src="/2018/03/24/uwp1/youtube.png" alt=""></figure></p><h2 id="App-to-app"><a href="#App-to-app" class="headerlink" title="App-to-app"></a>App-to-app</h2><p>app-to-app几乎可以说在绝大多数移动应用上都存在。尤其活跃在社交软件中。</p><ul><li><p><strong>Share data</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/app-to-app/share-data" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/app-to-app/share-data</a></p><p>​</p><p>Share data包含的共享数据类型有<strong>纯文本、统一资源标识符、HTML、格式化文本、位图、文档、开发者自定义的数据</strong>。</p><p>在YouTube里，当你看到一个有意思或者对别人来说可能特别重要的视频时，你可以点击分享，分享到你其他的社交软件账号上。如下图：</p></li></ul><p><figure class="figure"><img src="/2018/03/24/uwp1/share1.png" alt=""></figure></p><p><figure class="figure"><img src="/2018/03/24/uwp1/share2.png" alt=""></figure></p><p>​    这样，YouTube便可以与twitter、微信、facebook等Apps互动，实现app-to-            app的分享。</p><ul><li><p><strong>Copy and Paste</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/app-to-app/copy-and-paste" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/app-to-app/copy-and-paste</a></p></li></ul><p><figure class="figure"><img src="/2018/03/24/uwp1/paste.png" alt=""></figure><figure class="figure"><img src="/2018/03/24/uwp1/paste2.png" alt=""></figure></p><p>如图。在其他应用copy的视频链接，paste到YouTube搜索框内，可直接搜到相应视频。Copy&amp;Paste间接地实现了app-to-app的信息交流。</p><hr><h2 id="Devices-sensors-and-power"><a href="#Devices-sensors-and-power" class="headerlink" title="Devices, sensors, and power"></a>Devices, sensors, and power</h2><ul><li><p><strong>Orientation Sensor(方向传感器)</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/devices-sensors/use-the-orientation-sensor" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/devices-sensors/use-the-orientation-sensor</a></p><p>​</p><p>如果你打开了设备的方向传感器，在YouTube内播放视频时，方向传感器可以感知设备方向，进行界面的横竖自动调整。</p><p><figure class="figure"><img src="/2018/03/24/uwp1/censor4.png" alt=""></figure></p><p>​</p></li></ul><h2 id="Audio-video-and-camera"><a href="#Audio-video-and-camera" class="headerlink" title="Audio video, and camera"></a>Audio video, and camera</h2><ul><li><p><strong>Camera-Dispaly the camera preview</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/simple-camera-preview-access" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/simple-camera-preview-access</a></p><p>​</p><p>在YouTube点击了上传视频按钮时，或询问打开照相机的权限。权限正常开启后，应用会启动相机预览功能，在未开始录像之前，用户能通过相机预览到当前场景。如下图：</p><p><figure class="figure"><img src="/2018/03/24/uwp1/pre.png" alt=""></figure></p><p>​</p><p>​</p></li><li><p><strong>Media playback-Media items, playlists, and tracks</strong></p><p>​</p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/media-playback-with-mediasource" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/media-playback-with-mediasource</a></p><p>​</p><p>YouTube是全球最大的一款视频网站。关于video相关的特性自然是最多。最基本的播放项目、列表和曲目是不可或缺的。</p><p><figure class="figure"><img src="/2018/03/24/uwp1/list.png" alt=""></figure></p><p>同时Youtube存储海量的视频资源和用户的账户相关信息(用户列表、收藏、喜欢)，数据库的支持是必不可少的。YouTube采用的是开源数据库MySql。除此之外，我们还可以考虑使用SQLite和微软的SQL Server。</p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/data-access/sqlite-databases" target="_blank" rel="noopener">SQLite相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/data-access/sqlite-databases</a></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/data-access/sql-server-databases" target="_blank" rel="noopener">SQL Server相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/data-access/sql-server-databases</a></p><p>​</p><p>​</p></li><li><p><strong>Media playback-Custom video effects</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/custom-video-effects" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/custom-video-effects</a></p><p>​</p><p>在上传自己的视频时，YouTube携带了简单的视频剪切编辑工具，还增加了视频风格自定义功能。</p><p><figure class="figure"><img src="/2018/03/24/uwp1/cus.png" alt=""></figure></p><p>​</p><p><figure class="figure"><img src="/2018/03/24/uwp1/video1.png" alt=""></figure></p><p>​</p><p>​</p></li><li><p><strong>Media playback-Import media from a device</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/import-media-from-a-device" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/import-media-from-a-device</a></p><p>​</p><p>如图：YouTube可以扫描本地文件库，自动筛选出视频文件，支持用户从本地设备导入视频上传。</p><p><figure class="figure"><img src="/2018/03/24/uwp1/import.png" alt=""></figure></p><p>​</p></li></ul><hr><h2 id="Networking-and-web-services"><a href="#Networking-and-web-services" class="headerlink" title="Networking and web services"></a>Networking and web services</h2><p>作为一款联网应用(且是全球的超级流量大户)，YouTube的网络及web服务无处不在。没有最多，只有更多。</p><ul><li><p><strong>Sockets</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/networking/sockets" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/uwp/networking/sockets</a></p><p>Sockets服务无处不在。当你在搜索框搜索视频时，客户端(Client)通过传输控制协议Socket与远程的YouTube服务器端(Server)通信。期间要协定好socket类型、流量控制、端口号等基本服务。</p></li><li><p><strong>WebSockets</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/networking/websocketsWebSocket" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/uwp/networking/websocketsWebSocket</a></p><p>与Sockets不同的是，WebSockets应用层的协议。自然在YouTube内也是无处不在。当你播放一个视频的时候，websockets服务使YouTube服务器与客户端不间断地进行视频信息传输，这项服务必不可少。</p></li><li><p><strong>Background transfers</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/networking/background-transfers" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/uwp/networking/background-transfers</a></p><p>在Youtube下载/上传较长的视频时，可能会用到后台转移服务，使得下载/上传不中断。</p></li></ul><hr><h2 id="Launching-resuming-and-background-tasks"><a href="#Launching-resuming-and-background-tasks" class="headerlink" title="Launching, resuming, and background tasks"></a>Launching, resuming, and background tasks</h2><ul><li><p><strong>Launch resume-suspend an app(挂起)</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/launch-resume/suspend-an-app" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/launch-resume/suspend-an-app</a></p><p>​</p></li><li><p><strong>Launch resume-resume an app(恢复)</strong></p><p><a href="https://docs.microsoft.com/en-us/windows/uwp/launch-resume/resume-an-app" target="_blank" rel="noopener">相关实现文档：https://docs.microsoft.com/en-us/windows/uwp/launch-resume/resume-an-app</a></p><p>当视频播放暂停，回到home。若还有正在上传或者下载视频的任务，软件会在后台继续运行。这整个过程涉及到了应用的挂起、恢复、后台运行。</p><p><figure class="figure"><img src="/2018/03/24/uwp1/back.png" alt=""></figure><br>打开应用，可以从上次停止地方接着播放：<br><figure class="figure"><img src="/2018/03/24/uwp1/resume1.png" alt=""></figure></p><hr></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;figure class=&quot;figure&quot;&gt;&lt;img src=&quot;/2018/03/24/uwp1/youtube.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;App-to-app&quot;&gt;&lt;a href=&quot;#App-to-app&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UWP学习(一)--Talking about 5 Controls</title>
    <link href="http://yoursite.com/2018/03/18/hi-Taylor/"/>
    <id>http://yoursite.com/2018/03/18/hi-Taylor/</id>
    <published>2018-03-18T01:44:15.000Z</published>
    <updated>2018-04-07T10:25:19.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="InkCanvas"><a href="#InkCanvas" class="headerlink" title="InkCanvas"></a>InkCanvas</h2><p><figure class="figure"><img src="/2018/03/18/hi-Taylor/inkcanvas1.png" alt=""></figure></p><p>由于在上个学期刚使用Java开发过画板小软件，在长长的控件列表中，对我来说，此控件显得格外醒目。这是一个墨水画布控件：</p><ul><li>对于用户来说：该画布仅提供简单基础功能，画笔颜色仅能选择四种基础颜色！硬伤在于不能撤销画笔，也不能使用橡皮擦。想后悔吗？Clear All…高亮功能(DrawAsHighlighter)显得鸡肋，似无用武之处。</li></ul><ul><li><p>对开发者来讲：对想开发画板的程序员，该画布基础功能的实现确是减少了开发者不少的前期工作量，但刚开始觉得该控件只是在canvas上增加了基础画板功能，并没有替他高层的特性。因此产生偏见：微软团队相比开发这样一个鸡肋的控件，不如把本来的canvas控件做强做好。</p></li><li><p>查阅资料后，发现inkcanvas在canvas基础上提供了接收手写笔开发的输入以及对Strokes的特定默认属性(即每次用户的输入都会变成一个Strokes对象)，这点对于画笔工具，提供了极大方便。</p></li></ul><p>结论：高级画板工具开发者，instead of Canvas, pls choose InkCanvas.</p><p>那么为什么还要存在Canvas呢？总之Canvas是InkCanvas的子集，通过对比控件文档，事实也确实如此。说白了InkCanvas就是Canvas的升级版！但微软却把它单独拎出安以富含水墨气息之雅号，创新能力足为褒奖。</p><p>再次结论：为何不直接升级canvas？</p><hr><h2 id="PasswordBox"><a href="#PasswordBox" class="headerlink" title="PasswordBox"></a>PasswordBox</h2><p>这是一个真正令我make no sense的控件。</p><p>见图：</p><p><figure class="figure"><img src="/2018/03/18/hi-Taylor/pass.png" alt=""></figure></p><p>该控件功能一目了然，即实现密码的密文输入。乍一看实在普通不过了。但蹊跷之处在于右端的眼睛按钮的检查提示。</p><p>它使用方式是：长按提示，密码可明文显示，以检查密码是否输入正确。这种设计模式是好的，它还附带隐藏了一个很人性化功能：给不熟悉自己密码的人以明文输入。日常生活中，有人经常会记不牢自己密码，会选择明文输入自己密码。但是这个眼睛按钮必须<strong>持续按住</strong>才会明文显示输入的密码，按钮松开即变为了密文。也就是说，对于想明文输入密码的用户，必须点一下按钮输几个密码字符，再点提示按钮，再输几个密码字符，再点…</p><p>好的设计理念，变为错误实践后的扭曲。若索性指定密文输入，为何还暴露密码位数？</p><hr><h2 id="ToggleButton"><a href="#ToggleButton" class="headerlink" title="ToggleButton"></a>ToggleButton</h2><p><figure class="figure"><img src="/2018/03/18/hi-Taylor/tb0.png" alt=""></figure>   <figure class="figure"><img src="/2018/03/18/hi-Taylor/tb1.png" alt=""></figure></p><p>​                            ToggleButton</p><p><figure class="figure"><img src="/2018/03/18/hi-Taylor/ts0.png" alt=""></figure>                 <figure class="figure"><img src="/2018/03/18/hi-Taylor/ts1.png" alt=""></figure></p><p>​                            ToggleSwitch</p><p>如图，此控件与ToggleSwitch有一摸一样的功能。换句话说，它们的唯一区别大概是在样式上了。对设计来说，后者更具有自然美学属性，如其名，像一个真正的switch。由此，toggleButton，在switch控件对比下显得相形见绌了。</p><p>然而现实使用中，我又会时而不时碰到这样一个问题。旁边的状态(off/on)提醒，应该代表此时的状态，还是应该代表需要拨动开关，去达到的状态呢？加上颜色的区分，对于色盲者又不是那样友好，即使现在很多系统设有色盲模式，但那是产品外的解决方案。要彻底解决本产品的问题，要从其他角度着手。</p><p><strong>solution：以形状区分</strong>。</p><p><figure class="figure"><img src="/2018/03/18/hi-Taylor/tb.png" alt=""></figure></p><p>如图，检索到的几种切换开关的常见样式，toggleswitch采取了最差的方案1(3，4，6，7与其相当)。这几个较差的方案都具有以上两个缺点：不清楚当前状态、以颜色区分。我觉得比较好的设计方案是5，8。因为它们加入了图形形状的区分，I/o ，√/×。很显然，这是代表当前的状态，而不是文字提示以引歧义的我需要拨动开关去达到的那个状态。其次，形状的区分对色盲用户变得友好多了。解决了控件本身的问题，而不需要麻烦别人给你设计色盲模式，欠一个人情。</p><p>结论：喂，togglebutton君，比你颜值更高的toggleswitch都有缺陷了，你还有存在的必要吗？</p><hr><h2 id="ProgressRing"><a href="#ProgressRing" class="headerlink" title="ProgressRing"></a>ProgressRing</h2><p><figure class="figure"><img src="/2018/03/18/hi-Taylor/pr.png" alt=""></figure></p><p>我觉得人类对某种心理活动是尤为敏感以至于会焦虑恐惧–没底。</p><p>微软这个富有标志性的ProgressRing将人类“心里没底”这个消极心理反映得尤为具体。不过要先说的是，之所以富有标志性，其设计理念是很优美的。这种圆点旋转依次的滞后性甚能反映出加载的等待过程，不得不说微软的UI设计师脑洞还是相当了得。</p><p>但是好的设计理念再一次被实践为扭曲品。</p><ul><li>唯一想说的一点建议就是：<strong>加上计时数字显示接口</strong>(短时加载不需要提示，不使用该接口便是)。</li></ul><p>理由：官方文档对该控件的解释是：ProgressRing是一个通过显示动画铃声来指示<strong>不确定进度</strong>的控件。这个设计理念很好。但也正是因为进程的不确定进度，才加深了用户内心焦虑。此控件给出了“不确定”这一形式，却没有给出“缓解不确定”这一内容。并不是所有进度加载都需要数字化显示进度，进度显示不能完全反映一个进程的执行情况。有可能一个程序加载到90%，却只花了两分钟，另一个程序加载到了20%却已经花费两小时。而以我的使用经验，微软经常把此控件使用在长时加载的进程中，比如系统更新。倘若我想知道我进行了多长时间？(经常会有自启动的程序以至于你不知它何时开始，还是比如系统更新)</p><p>如果能在转圈中心加上计时器(比如转10圈，timer+1，以数字形式显示在中心)，我便对程序已加载的时间有了解，以判断决定自己下一步的操作(你不想浪费时间了，想立即停止)。倘若当你回到电脑发现计时器显示已经转了3000圈了,再是纵容这不确定的进度，我也会终止它，开始我更重要的工作。</p><p>其实这样的不确定进度加上计时器就能缓解用户心理“没底”的缺陷了。真是太感谢它。</p><hr><h2 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h2><p><figure class="figure"><img src="/2018/03/18/hi-Taylor/hub.png" alt=""></figure><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例文档</span><br><span class="line">&lt;Hub .../&gt;</span><br><span class="line">-or-</span><br><span class="line">&lt;Hub ...&gt;</span><br><span class="line">  oneOrMoreComponents</span><br><span class="line">&lt;/Hub&gt;</span><br></pre></td></tr></table></figure></p><p>我觉得一个不可或缺的控件应具备的条件是：在万千素材大集合中，选出的那些特征最小子集。比如没有能替代Button、Image、TextBox的控件。而Hub这个控件给我的感觉便是微软DIY的一个小UI，还达不到作为一个常用控件来引用的广度。使用各类控件的目的，就是增加开发人员的自定义程度，而此控件减小了可自定义的程度，把开发思路限制在这样一个既成的设计模式上。</p><p>利用其他控件组合完全可以实现Hub这一控件。在功能上，也是与ScrollViewer惊人的相似。由此，它便不是一个特征最小子集。就像化学元素有限定的数量一样，我觉得优秀的控件也应有限定的数量，不应该妥协地拼凑。如果控件开发人员时怀居里夫人那种不断探索与进取的精神，去发现控件界的“镭”而不是雷，我相信UI界会更显活力与精彩。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体的评价角度侧重在了控件设计缺陷给用户使用体验带来的不便。以我万分有限的见识，在如今贫瘠的uwp开发平台上，我认为用户的不活跃缘由于开发者的不活跃，而开发者的不活跃根源于用户的不活跃。一个好的产品是把用户使用体验思考到了极致，成功的例子无需再引述。当然不能把不好的体验都归结在小小的控件设计上，控件只是一个缩影。但是具有小缺陷的控件设计会累积，也会折射出该平台不可见的大设计缺陷。各种缺陷模式的叠加，就会给用户带来整个产品的使用疲劳，以至于矫情的人类不再买账。</p><p>再言：<strong>“若无必要，勿增实体。”</strong></p><p>xaml控件的设计似乎时常在做一些没必要的加法。本能合并的控件却要分开使用，冗杂的相似又相无给很多开发者带来了疑惑。硬性增加的高度自定义冷门控件，稀有的使用记录资料，在限制开发者想象力的同时，逐渐也带来了开发疲劳。开发疲劳与使用疲劳的不良循环，析出了如今这样一个贫瘠的软件平台。</p><p>由此我认为，<a href="https://baike.baidu.com/item/%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80%E5%8E%9F%E7%90%86/10900565?fr=aladdin" target="_blank" rel="noopener">奥卡姆剃刀原理</a>的重要哲理性，于经济于生活，都有很强的智慧。</p><hr><p>ps:希望在以后进一步对各控件的学习与使用过程中，能消除我目前对以上控件的偏见。若依旧不能，大概以上均属实话。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;InkCanvas&quot;&gt;&lt;a href=&quot;#InkCanvas&quot; class=&quot;headerlink&quot; title=&quot;InkCanvas&quot;&gt;&lt;/a&gt;InkCanvas&lt;/h2&gt;&lt;p&gt;&lt;figure class=&quot;figure&quot;&gt;&lt;img src=&quot;/2018/03/
      
    
    </summary>
    
    
  </entry>
  
</feed>
